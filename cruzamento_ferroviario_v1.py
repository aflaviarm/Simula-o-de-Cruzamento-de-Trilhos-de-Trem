# -*- coding: utf-8 -*-
"""Cruzamento_Ferroviario_v1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xMjXOMxJjlgCzFwMVS57pnz-UgQg7BLz
"""

import threading
import random
import time
import queue

class Trem(threading.Thread):
    def __init__(self, id, prioridade, direcao, cruzamento, fila):
        threading.Thread.__init__(self)
        self.id = id
        self.prioridade = prioridade
        self.direcao = direcao
        self.cruzamento = cruzamento
        self.fila = fila

    def run(self):
        print(f'Trem {self.id} (Prioridade {self.prioridade}) se aproximando do cruzamento pela via {self.direcao[0]}\n', end='', flush=True)
        self.fila.put((-self.prioridade, self.id))  # Adiciona o trem à fila de prioridade
        while True:
            with self.cruzamento:
                if self.fila.queue[0][1] == self.id:  # Verifica se este trem é o próximo na fila
                    self.fila.get()  # Remove o trem da fila
                    print(f'Trem {self.id} cruzando para a via {self.direcao[1]}\n', end='', flush=True)
                    time.sleep(1)  # Simula o tempo para cruzar
                    print(f'Trem {self.id} cruzou para a via {self.direcao[1]}\n', end='', flush=True)
                    break

def main():
    cruzamento = threading.Lock()
    fila = queue.PriorityQueue()
    direcoes = [('A1', 'A2'), ('A1', 'B2'), ('B1', 'A2'), ('B1', 'B2')]
    prioridades = [3, 2, 1]  # Alta prioridade = 3, média = 2, baixa = 1
    trens = []

    for i in range(random.randint(5, 15)):
        direcao = random.choice(direcoes)
        prioridade = random.choice(prioridades)
        trem = Trem(i, prioridade, direcao, cruzamento, fila)
        trens.append(trem)

    # Garante que pelo menos um trem tem prioridade alta e dois têm prioridade baixa
    trens[0].prioridade = 3
    trens[1].prioridade = 1
    trens[2].prioridade = 1

    # Inicia as threads dos trens
    for trem in trens:
        trem.start()

    # Aguarda todas as threads terminarem
    for trem in trens:
        trem.join()

if __name__ == "__main__":
    main()